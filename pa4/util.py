'''
Polling places

Utilities
'''

import json
import random
import sys

# DO NOT MODIFY THIS FILE
# pylint: disable-msg= invalid-name, too-many-arguments, line-too-long
# pylint: disable-msg= too-many-branches

def gen_voter_parameters(arrival_rate, voting_duration_rate,
                         percent_straight_ticket, straight_ticket_duration=2):
    '''
    Draw gap and voting duration from exponetial distribution

    Inputs:
        arrival_rate: (float) Lambda for gap
        voting_duration_rate: (float) Lambda for voting duration
        percent_straight_ticket: (float) Percentage straight-ticket voters
        straight_ticket_duration: (float) Voting duration for straight-ticket voters

    Returns:
        (gap, voting duration) as a pair of floats
    '''

    if random.random() <= percent_straight_ticket:
        # Straight-ticket
        voting_duration = straight_ticket_duration
    else:
        # Split-ticket
        voting_duration = random.expovariate(voting_duration_rate)

    gap = random.expovariate(arrival_rate)

    return (gap, voting_duration)


def load_precincts(precincts_filename):
    '''
    Load a precincts file.

    Inputs:
        precincts_filename: (string) Name of the precincts file

    Returns:
        A tuple containing:
        - a list of precinct dictionaries
        - a seed (integer)
    '''

    try:
        config = json.load(open(precincts_filename))
    except OSError as e:
        print("{}".format(e), file=sys.stderr)
        return None

    if not isinstance(config, dict):
        raise ValueError("Configuration file syntax error: should contain a JSON object")

    # Validate seed
    if "seed" not in config or not isinstance(config["seed"], int):
        raise ValueError("Configuration file syntax error: does not contain a seed")

    # Validate precincts
    if "precincts" not in config or not isinstance(config["precincts"], list):
        raise ValueError("Configuration file syntax error: does not contain a list of precincts")

    if config["precincts"] == []:
        raise ValueError("Configuration file must contain at least one precinct")

    for p in config["precincts"]:
        if not isinstance(p, dict):
            raise ValueError("List of precincts includes an unexpected value: {}".format(p))

        if "name" not in p:
            raise ValueError("Precinct is missing 'name' field: {}".format(p))

        for f in ("hours_open", "num_booths", "num_voters", "voting_duration_rate",
                  "arrival_rate", "percent_straight_ticket", "straight_ticket_duration"):
            if f not in p:
                raise ValueError("Precinct {} is missing '{}' field".format(p["name"], f))

    return config["precincts"], config["seed"]


def print_voters(voters, filename=None):
    '''
    Print the voters generated by the simulation.

    Inputs:
      voters: A list of voter objects
      filename: (string) Specifies the name of a file to use,
         if included.
    '''
    if filename is None:
        file = sys.stdout
    else:
        try:
            file = open(filename, "w")
        except OSError as e:
            print(e, file=sys.stderr)
            sys.exit(1)

    print("Arrival Time   Voting Duration   Start Time    Departure Time",
          file=file)
    for v in voters:
        s = "{:10.2f}"
        none_str = "      None"
        at = s.format(v.arrival_time) if v.arrival_time else none_str
        vd = s.format(v.voting_duration) if v.voting_duration else none_str
        st = s.format(v.start_time) if v.start_time else none_str
        if v.arrival_time is None or \
           v.voting_duration is None or \
           v.start_time is None:
            dt = none_str
        else:
            dt = s.format(v.start_time + v.voting_duration)
        combined = "{}   {}       {}        {}\n"
        print(combined.format(at, vd, st, dt), file=file)
